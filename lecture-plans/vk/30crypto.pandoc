% Използване на криптография
% Vasil Kolev \<vasil@ludost.net\>

# Какво е криптографията

## Описание
### Какво е криптографията

> The function of cryptographic protocols is to minimize the amount of trust required.

*Ferguson, Schneier, Kohno, "Cryptography Engineering"*

###

![book](cryptoeng.png)

## Елементи
### Елементи

* Хешове
* Симетрични шифри
* Асиметрични шифри
* Key Exchange
* Random генератори

### Хешове

* Hash(data) = H
* H е с константна дължина
* data не може да се изведе от H
* Hash(data) се различава много от Hash(data+1)
* Примерни функции - MD5, SHA1, SHA256

~~~~~~
~$ echo asdf |sha1sum
7d97e98f8af710c7e7fe703abc8f639e0ee507c4  -
~$ echo asdff |sha1sum
54d78b0145fd5d04cba4efabcdafc2effc851bea  -
~$ echo asdfe|sha1sum
800a8015ed4fa1504d5c3c23dfd0209675ccfce6  -
~~~~~~

### Симетрични шифри

* Един споделен ключ
* Функции за криптиране и декриптиране
     * E_symmetric(K, plaintext) = ciphertext
     * D_symmetric(K, ciphertext) = plaintext

* Примерни - AES, DES, Blowfish

### Асиметрични шифри

* Двойка ключове, Kpriv и Kpub
* Функции за криптиране и декриптиране
     * E_asymmetric(Kpub, plaintext) = ciphertext
     * D_asymmetric(Kpriv, ciphertext) = plaintext
* Криптирането с Kpriv се използва за подпис
* Примерни - RSA, Elliptic curves

### Key exchange

* Метод за комуникация м/у две страни, при който при подслушване не се разкриват данните, без shared secret.
* Diffie-Hellman:
    * Имат избрани 2 прости числа, p и g
    * Alice изпраща нa Bob A=p^a^ mod g
    * Bob изпраща на Alice B=p^b^ mod g
    * Alice изчислява S=B^a^ mod g
    * Bob изчислява S=А^b^ mod g
    * Двамата имат S, който е споделен ключ

### Random генератори

* Дава безкраен поток от random данни
* Не може да се предвиди по това, което е изпратил досега, какво ще връща в бъдеще 

## Приложения
###
#### Приложения

### Криптиране/декриптиране

* Пращаме E(K, plaintext), получаваме го и правим D(K, ciphertext)
* Много рядко се среща в този си вид

### Data integrity

* Хеширане на данните

### Съхраняване на пароли

* Просто hash на паролата
     * лоша идея, чупи се с rainbow таблици
* hash със salt
     * SAVED = SALT + HASH(PASS+SALT)
* Password-Based Key Derivation Function 2
     * PBKDF2(Func, Password, Salt, N, dkLen)

### Подпис

* Криптиран hash на документ
     * Sig=E_symmetric(K, Hash(plaintext))
     * Sig=E_asymmetric(Kpriv, Hash(plaintext))
* Hash с добавка
     * Sig = Hash(data+secret)

### многото приложения на подписа

* подпис на документ
* HMAC/integrity check
     * Добавяме в края на пакета Hash(data+secret)
* схеми за stateless token
     * сесии
* Challenge-response auth

## Сигурен канал за комуникация
###
#### Сигурен канал за комуникация
* Едно от най-използваните приложения (като TLS)

### Какво ни дава

* С кого говорим
* Защита от подслушване
* Защита от подмяна на трафика
* Защита от ретроактивно декриптиране

### Компоненти

* Взаимна идентификация
* Обмяна на сесийни ключове
* Криптиране и подписване на трафика
* Ясно прекратяване

### Взаимна идентификация

* Не е достатъчно да се идентифицирате пред сървъра, нужно е и той пред вас
* Различни схеми, чрез challenge-response, сертификати или споделени тайни

### Обмяна на сесийни ключове

* Лоша идея е да се използват shared secrets за цялата комуникация
* Могат да се обменят ключове за по-бърз (симетричен) шифър
* DH key exchange, временни ключове, които после се забравят
* Forward secrecy

### Криптиране и подписване на трафика

* Трафикът се криптира, за да не се знае какво има в него
* Трафикът се подписва, за да не може да се подмени
* Има комбинирани системи, като AES-GCM, които правят и двете

### Ясно прекратяване

* Трябва да знаете дали сесията е прекъсната нормално или от някой по средата

# Софтуерни компоненти

## random генератори
###
#### Софтуерни компоненти

###

> The generation of random numbers is too important to be left to chance.

*Robert R. Coveyou*


### Random генератори

* Използват се за генериране на ключове, nonce-ове, salt-ове...
* Счупения random генератор ви гарантира пробив в сигурността
* Debian openssl vulnerability: https://lwn.net/Articles/282230/
* Ентропия в смисъла на random генератор

### Как изглежда random генератора

* State
* функция за вадене на данни и update на state
* зареждане с ентропия в state
* seed за първоначално стартиране

### Съвети

* Използвайте системния
     * /dev/random, /dev/urandom, /dev/arandom
     * CryptGenRandom
* Ако не може само него, seed-вайте се от него
* Ако няма системен, помислете много внимателно

## Алгоритми
### Алгоритми

* Не измисляте сами
* just don't.
* Следвайте съществуващите стандарти:
     * AES, AES-GCM, AES-CBC
     * RSA, ECC
     * SHA-1, SHA-3
     * SHA256 се ползва от bitcoin и има твърде много хардуер за чупене

## Системни библиотеки
### Системни библиотеки

* Доколкото можете, използвайте системните библиотеки
* Не пишете сами шифри

## Keychains
### Keychains

* Възможност да съхраняват ключове и други важни неща
* Под контрола на потребителя
* Добра идея

# Техники

## Constant runtime
###
#### Техники

### Constant runtime

* За колко време работи нещо е side channel
* Кодът не трябва да отнема различно време в зависимост от данните

### Примерен код

* Къде е грешката в следния код:

~~~~~~C
int compare_passwords(char *a, char *b) {
	for (size_t i=0;a[i]!=0 && b[i]!=0;i++)
		if (a[i]!=b[i]) return 0;

	return a[i]==b[i];
}
~~~~~~

### По-правилен constant runtime

~~~~~~C
int compare_passwords(char *a, char *b) {
	int ret=1;
	for (size_t i=0;a[i]!=0 && b[i]!=0;i++)
		ret&=(a[i]==b[i]);

	return ret&(a[i]==b[i]);
}
~~~~~~

### Съвсем практически пример

~~~~~~C
NUM power(NUM base, NUM exponent) {
	if (exponent == 0) return NUM(1);
	if (exponent == 1) return base;
	if (modulus(exponent, 2)==0) {
		NUM ret = pow(base, div(exponent, 2));
		return mult(ret, ret);
	}
	/* exponent is not divisible by 2 */
	NUM ret = pow (base, sub(exponent, 1));
	return mult(ret, base);
}
~~~~~~

### Псевдокод на работещия алгоритъм

* Montgomery's ladder technique

~~~~~~C
NUM pow(NUM base, NUM exponent) {
	NUM x1 = base;
	NUM x2 = mult(base, base);
	for (int i=BITS(exponent)-2; i>0; i--) {
		if (BIT(exponent,i)==0) {
			x2 = mult(x1, x2); x1 = mult(x1, x1);
		} else {
			x1 = mult(x1, x2); x2 = mult(x2, x2);
		}
	}
	return x1;
}
~~~~~~

### Какво да избягваме

* if() (т.е. branch-ове в асемблера)
* Деление
* Достъп до адреси в паметта, базирани на данните
* Всякакви други операции с различна скорост спрямо данните

## constant cache usage
###
#### Constant cache usage

### Constant cache usage

~~~~~~C
#define TABLEN 1000000
int tab[TABLEN]={0, 1, 2, 3 ... , TABLEN-1 };
int process_data(uint8_t *data, size_t len, 
		uint8_t *output) 
{
	for (size_t i=0;i<len;i++) {
		for (j=0;j<data[i];j++) 
			output[i]+=tab[j*64];
	}
}
~~~~~~

### Атака, защита

* Друга програма, която пълни кеша и гледа за колко време и идват данните
* Старайте се да стоите в един cache line и да не зависи какво четете от входните данни

## Защита на данните

### Memory locking

* Swap
* Не искаме да ни прочетат ключовете
* Ползвайте mlock() и компания
* Не помага при хибернация

### Memory wiping

* Почиствайте си паметта
     * free() не е достатъчно
* Cold boot атаки

### Временни файлове

* Не използвайте такива за ключове
* Не използвайте такива за plaintext-а
* Ако можете, изобщо не използвайте

### ... защото триенето от диска е сложно

* Всеки може да възстанови просто изтрит файл
* Много хора могат да прочетат диск, презаписан с нули
* Някои могат презаписан няколко пъти
* ... без да броим remap-нати сектори, лоши сектори, SSD-та и всякакви други гадости
* Изобщо, дисковете са ви враг

# Край

##

### Малко изводи

* Криптографията е трудна
* Криптографията е полезна
* Ползвайте я внимателно и четете какво се пише по въпроса

###
#### Въпроси?


